{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///build.js","webpack:///webpack/bootstrap 714015d698a8ccd6d3f8","webpack:///./index.js","webpack:///./utils.js","webpack:///./~/custom-event/index.js","webpack:///./~/hammerjs/hammer.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_interopRequireDefault","obj","default","_classCallCheck","instance","Constructor","TypeError","_extends","assign","target","arguments","length","source","key","_createClass","defineProperties","props","descriptor","writable","protoProps","staticProps","_hammerjs","_hammerjs2","_customEvent","_utils","defaults","timing","childsClassName","dir","threshold","showButtons","infinite","showPointers","showThumbnails","itemsPerSlide","SlimSlider","options","_this","handleSwipe","e","shiftY","deltaY","slideWidth","panEnabled","translate","pos","deltaX","isFinal","type","goToNext","goToPrevious","slideTo","current","selector","Error","init","enabled","initGesture","sliderManager","destroy","touchAction","Manager","slider","recognizers","Pan","direction","DIRECTION_ALL","on","timeout","operator","document","querySelector","parent","parentNode","slides","querySelectorAll","slideCount","Math","ceil","offsetWidth","itemWidth","initDom","createPagination","createThumbs","createButtons","registerListeners","dispatchEvent","_this2","classList","add","style","forEach","el","k","dataset","item","minWidth","carouselPagination","create","class","carouselPointer","id","appendChild","thumbnails","thumb","thumbLink","data-slideto","href","thumbImg","src","nextButton","prevButton","currentPointer","previousPointer","remove","_this3","events","addEvent","updatePagination","updateThumbs","selectorTarget","slideto","window","addEventListener","clearTimeout","resized","setTimeout","_","to","_this4","requestAnimationFrame","transform","_this5","last","prevSlide","removeChild","destroyAll","removeDom","attributes","undefined","element","createElement","keys","attr","setAttribute","err","console","error","closestParent","includeSelf","match","matches","body","eventType","selectorParent","fn","details","event","CustomEvent","bubbles","cancelable","Events","listeners","capture","push","removeEventListener","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","useNative","NativeCustomEvent","detail","foo","createEvent","params","initCustomEvent","createEventObject","Boolean","__WEBPACK_AMD_DEFINE_RESULT__","exportName","setTimeoutContext","context","bindFn","invokeArrayArg","arg","Array","isArray","each","iterator","deprecate","method","message","deprecationMessage","stack","replace","log","warn","apply","inherit","child","base","properties","childP","baseP","constructor","_super","boolOrFn","val","args","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","removeEventListeners","hasParent","node","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","sort","results","values","a","b","prefixed","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","self","inputTarget","domHandler","ev","enable","createInputInstance","Type","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","INPUT_START","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","now","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","x","overallVelocityY","y","abs","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","lastInterval","COMPUTE_INTERVAL","v","clientX","round","clientY","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","PROPS_XY","sqrt","atan2","PI","start","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","splice","DEDUP_TIMEOUT","isSyntheticEvent","t","dx","dy","DEDUP_DISTANCE","TouchAction","set","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","getTouchActionProps","NATIVE_TOUCH_ACTION","touchMap","cssSupports","CSS","supports","Recognizer","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","preset","handlers","oldCssProps","toggleCssProps","recognizeWith","requireFailure","cssProps","triggerDomEvent","data","gestureEvent","initEvent","gesture","TEST_ELEMENT","Date","output","index","nextKey","extend","dest","merge","MOBILE_REGEX","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_MAP","compute","update","getTouchAction","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_RECOGNIZED","STATE_FAILED","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","process","reset","attrTest","optionPointers","isRecognized","isValid","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","stop","force","stopped","curRecognizer","existing","off","Tap","Swipe","Pinch","Rotate","Press","freeGlobal"],"mappings":"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","file":"build.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SlimSlider\"] = factory();\n\telse\n\t\troot[\"SlimSlider\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SlimSlider\"] = factory();\n\telse\n\t\troot[\"SlimSlider\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _hammerjs = __webpack_require__(3);\n\nvar _hammerjs2 = _interopRequireDefault(_hammerjs);\n\nvar _customEvent = __webpack_require__(2);\n\nvar _customEvent2 = _interopRequireDefault(_customEvent);\n\nvar _utils = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * {Timing}: Intiger: represents the animation value between slides \n * {childsClassName}: String : slider child slides elements\n * {dir}: String: Slider direction\n * {threshold}: Intiger: refer to hammerjs docs\n * {showButtons}: Boolean: show or hide Next / Prev buttons\n * {infinte}: Boolean: startover when the slider reaches the end.\n * {showPointers}: Boolean: show or hide pager pointers.\n *\n */\nvar defaults = {\n  timing: 400,\n  childsClassName: '.slim-slide',\n  dir: 'ltr',\n  threshold: 10,\n  showButtons: false,\n  infinite: false,\n  showPointers: true,\n  showThumbnails: true,\n  itemsPerSlide: 1\n};\n\nvar SlimSlider = function () {\n  function SlimSlider(options) {\n    var _this = this;\n\n    _classCallCheck(this, SlimSlider);\n\n    this.handleSwipe = function (e) {\n      var shiftY = e.deltaY / _this.slideWidth * 100 > -20;\n\n      if (_this.panEnabled && shiftY) {\n        _this.translate(_this.pos + e.deltaX);\n\n        if (e.isFinal) {\n          if (e.type == 'panleft') {\n            _this.goToNext();\n          } else if (e.type == 'panright') {\n            _this.goToPrevious();\n          } else {\n            _this.slideTo(_this.current);\n          }\n        } else if (e.type == 'panend' || e.type == 'pancancel') {\n          _this.slideTo(_this.current);\n        }\n      } else {\n        _this.slideTo(_this.current);\n      }\n    };\n\n    this.options = Object.assign({}, defaults, options);\n    if (!this.options.selector) {\n      throw new Error('option missing: Providing a selector is a must to initialize the slider!');\n    }\n\n    this.init();\n  }\n  /**\n   * Method to enable and disable paning\n   * useful to disable sliding if another 3rdparty using the image\n   * like PhotoViewJs.\n   */\n\n\n  _createClass(SlimSlider, [{\n    key: 'setPan',\n    value: function setPan(enabled) {\n      this.panEnabled = enabled;\n      this.initGesture();\n    }\n    /**\n     * init the Gesture recongition and makes sure\n     * its removed of it was there before\n     */\n\n  }, {\n    key: 'initGesture',\n    value: function initGesture() {\n      if (this.sliderManager) {\n        this.sliderManager.destroy();\n        this.sliderManager = null;\n      }\n\n      var touchAction = this.panEnabled ? { touchAction: 'pan-y' } : { touchAction: 'none' };\n      this.sliderManager = new _hammerjs2.default.Manager(this.slider, _extends({}, touchAction, {\n        recognizers: [[_hammerjs2.default.Pan, { direction: _hammerjs2.default.DIRECTION_ALL }]]\n      }));\n\n      this.sliderManager.on('panstart panmove panend pancancel panleft panright panup pandown', this.handleSwipe);\n    }\n  }, {\n    key: 'init',\n    value: function init() {\n      this.timeout;\n      this.panEnabled = true;\n      this.timing = this.options.timing;\n      this.threshold = this.options.threshold;\n      this.current = 0;\n      this.pos = 0;\n      this.operator = this.options.dir === 'rtl' ? 1 : -1;\n      this.slider = document.querySelector(this.options.selector);\n      this.parent = this.slider.parentNode;\n      this.slides = this.slider.querySelectorAll(this.options.childsClassName);\n      this.slideCount = Math.ceil(this.slides.length / this.options.itemsPerSlide);\n      this.slideWidth = this.slider.offsetWidth;\n      this.itemWidth = this.slider.offsetWidth / this.options.itemsPerSlide;\n      this.initDom();\n      this.options.showPointers && this.createPagination();\n      this.options.showThumbnails && this.createThumbs();\n      this.options.showButtons && this.createButtons();\n      this.initGesture();\n      this.registerListeners();\n\n      (0, _utils.dispatchEvent)(this.slider, 'after.slim.init', { current: this.current });\n    }\n    /**\n     * Prepares the current slider dom with neccessary data.\n     */\n\n  }, {\n    key: 'initDom',\n    value: function initDom() {\n      var _this2 = this;\n\n      this.slides[0].classList.add('active');\n      this.parent.style.direction = this.options.dir;\n      this.slides.forEach(function (el, k) {\n        el.dataset.item = k;\n        el.style.minWidth = _this2.itemWidth + 'px';\n      });\n    }\n    /**\n     * Creates pointers on the fly and appends it to the slider parent element.\n     */\n\n  }, {\n    key: 'createPagination',\n    value: function createPagination() {\n      this.carouselPagination = (0, _utils.create)('div', { class: 'carousel-pagination' });\n\n      for (var k = 0; k < this.slideCount; k++) {\n        var carouselPointer = (0, _utils.create)('div', { class: 'carousel-pagination-pointer', id: 'pointer_' + k });\n        this.carouselPagination.appendChild(carouselPointer);\n      }\n\n      this.parent.appendChild(this.carouselPagination);\n    }\n    /**\n     * Creates thumbnails on the fly and appends it to the slider parent element.\n     */\n\n  }, {\n    key: 'createThumbs',\n    value: function createThumbs() {\n      this.thumbnails = (0, _utils.create)('div', { class: 'thumbs' });\n\n      for (var k = 0; k < this.slideCount; k++) {\n        var thumb = (0, _utils.create)('div', { class: 'thumb', id: 'thumb_' + k });\n        var thumbLink = (0, _utils.create)('a', { class: 'thumb-link', 'data-slideto': k, href: '#' });\n        var thumbImg = (0, _utils.create)('img', { class: 'thumb-image', src: '' + this.slides[k].dataset.thumb });\n        thumbLink.appendChild(thumbImg);\n        thumb.appendChild(thumbLink);\n        this.thumbnails.appendChild(thumb);\n      }\n      this.parent.appendChild(this.thumbnails);\n    }\n    /**\n     * Creates `Next` and `Prevoius` buttons\n     */\n\n  }, {\n    key: 'createButtons',\n    value: function createButtons() {\n      this.nextButton = (0, _utils.create)('a', { class: 'next carousel-arrow' });\n      this.prevButton = (0, _utils.create)('a', { class: 'prev carousel-arrow' });\n\n      if (this.carouselPagination) {\n        this.carouselPagination.appendChild(this.nextButton);\n        this.carouselPagination.appendChild(this.prevButton);\n      }\n    }\n    /**\n     * With evey slide it is called to update the pointers\n     */\n\n  }, {\n    key: 'updatePagination',\n    value: function updatePagination() {\n      var item = this.slider.querySelector('.active').dataset.item;\n      var currentPointer = this.parent.querySelector('#pointer_' + item);\n      var previousPointer = this.parent.querySelector('.carousel-pagination-pointer.active');\n\n      previousPointer && previousPointer.classList.remove('active');\n      currentPointer && currentPointer.classList.add('active');\n    }\n\n    /**\n     * With evey slide it is called to update the pointers\n     */\n\n  }, {\n    key: 'updateThumbs',\n    value: function updateThumbs() {\n      var item = this.slider.querySelector('.active').dataset.item;\n      var currentPointer = this.parent.querySelector('#thumb_' + item);\n      var previousPointer = this.parent.querySelector('.thumb.active');\n\n      previousPointer && previousPointer.classList.remove('active');\n      currentPointer && currentPointer.classList.add('active');\n    }\n  }, {\n    key: 'goToNext',\n    value: function goToNext() {\n      this.slideTo(this.current - this.operator);\n    }\n  }, {\n    key: 'goToPrevious',\n    value: function goToPrevious() {\n      this.slideTo(this.current + this.operator);\n    }\n  }, {\n    key: 'registerListeners',\n    value: function registerListeners() {\n      var _this3 = this;\n\n      _utils.events.addEvent(this.nextButton, 'click', function (e) {\n        _this3.goToNext();\n      });\n      _utils.events.addEvent(this.prevButton, 'click', function (e) {\n        _this3.goToPrevious();\n      });\n      _utils.events.addEvent(this.slider, 'after.slim.init', function (e) {\n        _this3.updatePagination();\n        _this3.updateThumbs();\n      });\n      _utils.events.addEvent(this.slider, 'after.slim.slide', function (e) {\n        _this3.updatePagination();\n        _this3.updateThumbs();\n      });\n\n      (0, _utils.on)('click', '.thumbs', '.thumb-link', function (e) {\n        _this3.slideTo(e.selectorTarget.dataset.slideto);\n      });\n\n      /**\n       * Makes sure the functions is fired at the last\n       * resize event called.\n       */\n      window.addEventListener('resize', function (e) {\n        clearTimeout(_this3.resized);\n        _this3.resized = setTimeout(function (_) {\n          _this3.destroy();\n          _this3.init();\n          _this3.slideTo(0);\n        }, 500);\n      });\n    }\n  }, {\n    key: 'translate',\n    value: function translate(to) {\n      var _this4 = this;\n\n      (0, _utils.requestAnimationFrame)(function (_) {\n        _this4.slider.style.transform = 'translateX(' + to + 'px)';\n      });\n    }\n  }, {\n    key: 'slideTo',\n    value: function slideTo(n) {\n      var _this5 = this;\n\n      var last = this.options.infinite ? 0 : this.slideCount - 1;\n      this.current = n < 0 ? 0 : n > this.slideCount - 1 ? last : n;\n      this.pos = this.operator * this.current * this.slideWidth;\n      var prevSlide = this.slider.querySelector(this.options.childsClassName + '.active');\n\n      this.slider.classList.add('is-animating');\n      prevSlide && prevSlide.classList.remove('active');\n      this.slides[this.current].classList.add('active');\n\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      this.timeout = setTimeout(function (_) {\n        _this5.slider.classList.remove('is-animating');\n        (0, _utils.dispatchEvent)(_this5.slider, 'after.slim.slide', { current: _this5.current });\n      }, this.timing);\n\n      this.translate(this.pos);\n    }\n  }, {\n    key: 'removeDom',\n    value: function removeDom() {\n      this.parent.removeChild(this.thumbnails);\n      this.parent.removeChild(this.carouselPagination);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      _utils.events.destroyAll();\n      this.removeDom();\n    }\n  }]);\n\n  return SlimSlider;\n}();\n\nexports.default = SlimSlider;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.create = create;\nexports.closestParent = closestParent;\nexports.on = on;\nexports.dispatchEvent = dispatchEvent;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction create(type) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var element = document.createElement(type);\n\n  try {\n    Object.keys(attributes).forEach(function (attr) {\n      element.setAttribute(attr, attributes[attr]);\n    });\n  } catch (err) {\n    console.error(err);\n  }\n\n  return element;\n}\n\nvar Events = function () {\n  function Events() {\n    _classCallCheck(this, Events);\n\n    this.listeners = [];\n  }\n\n  _createClass(Events, [{\n    key: \"addEvent\",\n    value: function addEvent(el, e, fn, capture) {\n      el && el.addEventListener(e, fn, capture);\n      this.listeners.push({ el: el, fn: fn, e: e });\n    }\n  }, {\n    key: \"destroyAll\",\n    value: function destroyAll() {\n      this.listeners.length > 0 && this.listeners.forEach(function (l) {\n        l.el.removeEventListener(l.e, l.fn);\n      });\n      this.listeners = [];\n    }\n  }]);\n\n  return Events;\n}();\n\nvar events = exports.events = new Events();\n\nfunction closestParent(el, selector, includeSelf) {\n  var parent = el.parentNode;\n  var match = null;\n  if (includeSelf && el.matches(selector)) {\n    return el;\n  }\n\n  while (parent && parent !== document.body) {\n    if (parent.matches && parent.matches(selector)) {\n      match = parent;\n      break;\n    } else {\n      parent = parent.parentNode;\n    }\n  }\n\n  return match;\n};\n\n/**\n* `on` : accepts a parent selector at which the event will be bound and to be caught.\n*/\nfunction on(eventType, selectorParent, selector, fn) {\n  var el = document.querySelector(selectorParent);\n\n  if (!el || !eventType || !selectorParent || !selector || !fn) {\n    return null;\n  }\n\n  events.addEvent(el, eventType, function (e) {\n    var target = e.target;\n    var matches = closestParent(target, selector, true);\n    if (matches) {\n      e.selectorTarget = matches;\n      fn.call(matches, e);\n    }\n  });\n}\n\nfunction dispatchEvent(target, type, details) {\n  var event = new CustomEvent(type, {\n    bubbles: true,\n    cancelable: true,\n    details: details\n  });\n\n  target.dispatchEvent(event);\n}\n\nvar requestAnimationFrame = exports.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\nvar NativeCustomEvent = __webpack_require__.i({}).CustomEvent;\n\nfunction useNative () {\n  try {\n    var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });\n    return  'cat' === p.type && 'bar' === p.detail.foo;\n  } catch (e) {\n  }\n  return false;\n}\n\n/**\n * Cross-browser `CustomEvent` constructor.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent\n *\n * @public\n */\n\nmodule.exports = useNative() ? NativeCustomEvent :\n\n// IE >= 9\n'undefined' !== typeof document && 'function' === typeof document.createEvent ? function CustomEvent (type, params) {\n  var e = document.createEvent('CustomEvent');\n  if (params) {\n    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);\n  } else {\n    e.initCustomEvent(type, false, false, void 0);\n  }\n  return e;\n} :\n\n// IE <= 8\nfunction CustomEvent (type, params) {\n  var e = document.createEventObject();\n  e.type = type;\n  if (params) {\n    e.bubbles = Boolean(params.bubbles);\n    e.cancelable = Boolean(params.cancelable);\n    e.detail = params.detail;\n  } else {\n    e.bubbles = false;\n    e.cancelable = false;\n    e.detail = void 0;\n  }\n  return e;\n}\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n        return Hammer;\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(0);\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// build.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 714015d698a8ccd6d3f8","'use strict';\n\nimport Hammer from 'hammerjs';\nimport CustomEvent from 'custom-event';\nimport {dispatchEvent, \n        create, \n        events, \n        on,\n        requestAnimationFrame} from './utils';\n\n/**\n * {Timing}: Intiger: represents the animation value between slides \n * {childsClassName}: String : slider child slides elements\n * {dir}: String: Slider direction\n * {threshold}: Intiger: refer to hammerjs docs\n * {showButtons}: Boolean: show or hide Next / Prev buttons\n * {infinte}: Boolean: startover when the slider reaches the end.\n * {showPointers}: Boolean: show or hide pager pointers.\n *\n */\nconst defaults = {\n  timing : 400,\n  childsClassName : '.slim-slide',\n  dir: 'ltr',\n  threshold: 10,\n  showButtons:false,\n  infinite:false,\n  showPointers : true,\n  showThumbnails:true,\n  itemsPerSlide : 1,\n}\nexport default class SlimSlider{\n  constructor(options){\n    this.options = Object.assign({}, defaults, options);\n    if(!this.options.selector){\n      throw new Error('option missing: Providing a selector is a must to initialize the slider!');\n    }\n    \n    this.init();\n  }\n  /**\n   * Method to enable and disable paning\n   * useful to disable sliding if another 3rdparty using the image\n   * like PhotoViewJs.\n   */\n  setPan(enabled){\n    this.panEnabled = enabled;\n    this.initGesture();\n  }\n  /**\n   * init the Gesture recongition and makes sure\n   * its removed of it was there before\n   */\n  initGesture(){\n    if(this.sliderManager){\n      this.sliderManager.destroy();\n      this.sliderManager = null;\n    }\n\n    let touchAction = this.panEnabled ? {touchAction: 'pan-y'} : {touchAction: 'none'} ;\n    this.sliderManager = new Hammer.Manager(this.slider, {\n      ...touchAction,\n      recognizers: [\n          [Hammer.Pan,{ direction: Hammer.DIRECTION_ALL }],\n      ]\n    });\n\n    this.sliderManager.on('panstart panmove panend pancancel panleft panright panup pandown', this.handleSwipe)\n  }\n\n  init(){\n    this.timeout;\n    this.panEnabled = true;\n    this.timing = this.options.timing;\n    this.threshold = this.options.threshold;\n    this.current = 0;\n    this.pos = 0;\n    this.operator = (this.options.dir === 'rtl' ? 1 : -1);\n    this.slider = document.querySelector(this.options.selector);\n    this.parent = this.slider.parentNode;\n    this.slides = this.slider.querySelectorAll(this.options.childsClassName);\n    this.slideCount = Math.ceil(this.slides.length / this.options.itemsPerSlide);\n    this.slideWidth = this.slider.offsetWidth;\n    this.itemWidth = this.slider.offsetWidth / this.options.itemsPerSlide;\n    this.initDom();\n    this.options.showPointers && this.createPagination();\n    this.options.showThumbnails && this.createThumbs();\n    this.options.showButtons && this.createButtons();\n    this.initGesture();\n    this.registerListeners();\n\n    dispatchEvent(this.slider, 'after.slim.init', { current:this.current })\n  }\n  /**\n   * Prepares the current slider dom with neccessary data.\n   */\n  initDom(){\n    this.slides[0].classList.add('active');\n    this.parent.style.direction = this.options.dir;\n    this.slides.forEach( (el, k) => {\n      el.dataset.item = k;\n      el.style.minWidth = `${this.itemWidth}px`;\n    })\n  }\n  /**\n   * Creates pointers on the fly and appends it to the slider parent element.\n   */\n  createPagination(){\n    this.carouselPagination = create('div', {class:'carousel-pagination'}); \n    \n    for(let k = 0; k < this.slideCount; k++){\n      let carouselPointer = create('div', {class:'carousel-pagination-pointer', id: `pointer_${k}` });\n      this.carouselPagination.appendChild(carouselPointer);\n    }\n\n    this.parent.appendChild(this.carouselPagination);\n  }\n  /**\n   * Creates thumbnails on the fly and appends it to the slider parent element.\n   */\n  createThumbs(){\n    this.thumbnails = create('div', {class:'thumbs'}); \n    \n    for(let k = 0; k < this.slideCount; k++){\n      let thumb = create('div', {class:'thumb', id: `thumb_${k}` });\n      let thumbLink = create('a', {class:'thumb-link', 'data-slideto': k, href:'#'});\n      let thumbImg = create('img', {class:'thumb-image', src: `${this.slides[k].dataset.thumb}` });\n      thumbLink.appendChild(thumbImg);\n      thumb.appendChild(thumbLink);\n      this.thumbnails.appendChild(thumb);\n    }\n    this.parent.appendChild(this.thumbnails);\n  }\n  /**\n   * Creates `Next` and `Prevoius` buttons\n   */\n  createButtons(){\n    this.nextButton = create('a', {class:'next carousel-arrow'});\n    this.prevButton = create('a', {class:'prev carousel-arrow'});\n\n    if(this.carouselPagination){\n      this.carouselPagination.appendChild(this.nextButton);\n      this.carouselPagination.appendChild(this.prevButton);\n    }\n  }\n  /**\n   * With evey slide it is called to update the pointers\n   */\n  updatePagination(){\n      let item = this.slider.querySelector('.active').dataset.item;\n      let currentPointer = this.parent.querySelector(`#pointer_${item}`);\n      let previousPointer = this.parent.querySelector('.carousel-pagination-pointer.active');\n\n      previousPointer && previousPointer.classList.remove('active');\n      currentPointer && currentPointer.classList.add('active'); \n  }\n\n  /**\n   * With evey slide it is called to update the pointers\n   */\n  updateThumbs(){\n      let item = this.slider.querySelector('.active').dataset.item;\n      let currentPointer = this.parent.querySelector(`#thumb_${item}`);\n      let previousPointer = this.parent.querySelector('.thumb.active');\n\n      previousPointer && previousPointer.classList.remove('active');\n      currentPointer && currentPointer.classList.add('active'); \n  }\n\n  goToNext(){\n    this.slideTo(this.current - this.operator );\n  }\n\n  goToPrevious(){\n    this.slideTo(this.current + this.operator );\n  }\n\n  registerListeners(){\n    events.addEvent(this.nextButton, 'click', e => {\n      this.goToNext();\n    })\n    events.addEvent(this.prevButton, 'click', e => {\n      this.goToPrevious();   \n    })\n    events.addEvent(this.slider, 'after.slim.init', e => {\n      this.updatePagination();\n      this.updateThumbs();\n    });\n    events.addEvent(this.slider, 'after.slim.slide', (e) => {\n      this.updatePagination();\n      this.updateThumbs();\n    });\n\n    on('click', '.thumbs', '.thumb-link', e => {\n      this.slideTo(e.selectorTarget.dataset.slideto)\n    })\n\n    /**\n     * Makes sure the functions is fired at the last\n     * resize event called.\n     */\n    window.addEventListener('resize', e => {\n      clearTimeout(this.resized);\n      this.resized = setTimeout(_=> {\n        this.destroy()\n        this.init();\n        this.slideTo(0);\n      }, 500);\n    })\n  }\n\n  translate(to){\n    requestAnimationFrame(_ => {this.slider.style.transform = `translateX(${to}px)`; })\n  }\n\n  slideTo(n){\n    let last = this.options.infinite ? 0 : this.slideCount - 1;\n    this.current = n < 0 ? 0 : (n > this.slideCount - 1 ? last : n )\n    this.pos = this.operator * this.current * this.slideWidth;\n    let prevSlide = this.slider.querySelector(`${this.options.childsClassName}.active`);\n    \n    this.slider.classList.add('is-animating');\n    prevSlide && prevSlide.classList.remove('active');\n    this.slides[this.current].classList.add('active');\n\n    if(this.timeout){\n      clearTimeout(this.timeout);\n    }\n\n    this.timeout = setTimeout( _ => {\n      this.slider.classList.remove( 'is-animating');\n      dispatchEvent(this.slider, 'after.slim.slide', { current:this.current });\n    }, this.timing )\n\n    this.translate(this.pos);\n  }\n\n  handleSwipe = e => {\n    let shiftY = (e.deltaY / this.slideWidth) * 100 > - 20  ;\n\n    if(this.panEnabled && shiftY) {\n      this.translate(this.pos + e.deltaX)\n\n      if(e.isFinal){\n        if(e.type == 'panleft') {\n          this.goToNext()\n        } else if( e.type == 'panright'){\n          this.goToPrevious();\n        } else {\n          this.slideTo(this.current);\n        }\n      } else if( e.type == 'panend' || e.type == 'pancancel'){\n        this.slideTo(this.current);\n      }\n    } else {\n      this.slideTo(this.current);\n    }\n  }\n  removeDom(){\n    this.parent.removeChild(this.thumbnails)\n    this.parent.removeChild(this.carouselPagination)\n  }\n  destroy(){\n    events.destroyAll();\n    this.removeDom();\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./index.js","export function create(type, attributes = {}){\n  let element = document.createElement(type);\n  \n  try{\n    Object.keys(attributes).forEach(attr => {\n      element.setAttribute(attr, attributes[attr]);\n    })\n  } catch(err){\n    console.error(err)\n  }\n\n  return element;\n}\n\nclass Events{\n  listeners = [];\n  addEvent(el, e, fn, capture){\n    el && el.addEventListener(e, fn, capture);\n    this.listeners.push({el, fn, e})\n  }\n  destroyAll(){\n    this.listeners.length > 0 && this.listeners.forEach(l=>{\n      l.el.removeEventListener(l.e, l.fn)\n    })\n    this.listeners = []\n  }\n}\n\nexport const events = new Events();\n\nexport function closestParent(el, selector, includeSelf) {\n  let parent = el.parentNode;\n  let match = null;\n  if (includeSelf && el.matches(selector)) {\n      return el;\n  }\n\n  while (parent && parent !== document.body) {\n    if (parent.matches && parent.matches(selector)) {\n       match =  parent;\n       break;\n    } else {\n        parent = parent.parentNode;\n    }\n  }\n\n  return match;\n};\n\n/**\n* `on` : accepts a parent selector at which the event will be bound and to be caught.\n*/\nexport function on(eventType, selectorParent, selector, fn){\n let el = document.querySelector(selectorParent);\n\n if(!el || !eventType || !selectorParent || !selector  || !fn ) {\n   return null;\n }\n\n events.addEvent(el, eventType, e => {\n   let target = e.target;\n   let matches = closestParent(target, selector, true);\n   if(matches) {\n     e.selectorTarget = matches;\n     fn.call(matches, e);\n   }\n })\n}\n\n\nexport function dispatchEvent(target, type, details) {\n\tlet event = new CustomEvent(\n\t\t\ttype,\n\t    {\n        bubbles: true,\n        cancelable: true,\n        details: details\n\t    }\n\t);\n\n\ttarget.dispatchEvent(event);\n}\n\nexport const requestAnimationFrame = window.requestAnimationFrame \n\t\t\t|| window.mozRequestAnimationFrame \n\t\t\t|| window.webkitRequestAnimationFrame \n\t\t\t|| window.msRequestAnimationFrame;\n\n\n\n// WEBPACK FOOTER //\n// ./utils.js","\nvar NativeCustomEvent = global.CustomEvent;\n\nfunction useNative () {\n  try {\n    var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });\n    return  'cat' === p.type && 'bar' === p.detail.foo;\n  } catch (e) {\n  }\n  return false;\n}\n\n/**\n * Cross-browser `CustomEvent` constructor.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent\n *\n * @public\n */\n\nmodule.exports = useNative() ? NativeCustomEvent :\n\n// IE >= 9\n'undefined' !== typeof document && 'function' === typeof document.createEvent ? function CustomEvent (type, params) {\n  var e = document.createEvent('CustomEvent');\n  if (params) {\n    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);\n  } else {\n    e.initCustomEvent(type, false, false, void 0);\n  }\n  return e;\n} :\n\n// IE <= 8\nfunction CustomEvent (type, params) {\n  var e = document.createEventObject();\n  e.type = type;\n  if (params) {\n    e.bubbles = Boolean(params.bubbles);\n    e.cancelable = Boolean(params.cancelable);\n    e.detail = params.detail;\n  } else {\n    e.bubbles = false;\n    e.cancelable = false;\n    e.detail = void 0;\n  }\n  return e;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/custom-event/index.js\n// module id = 2\n// module chunks = 0","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/hammerjs/hammer.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}